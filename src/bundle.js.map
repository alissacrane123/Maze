{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/draw_maze.js","webpack:///./src/index.js","webpack:///./src/maze.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;AAElB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,0B;;;;;;;;;;;ACzDA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,iBAAiB,mBAAO,CAAC,uCAAa;;AAEtC;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,C;;;;;;;;;;;;;AChBD;AACA,kB;AACA;AACA;AACA;;;AAGA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B,yBAAyB;AACzB,6BAA6B;AAC7B;AACA,qBAAqB,OAAO;AAC5B,wCAAwC;AACxC,oCAAoC;AACpC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iC;AACA;AACA;;AAEA,qB;AACA;;;AAGA;AACA;;AAEA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,6DAA6D;;AAE7D,sCAAsC;AACtC,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wCAAwC;AACxC;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;AAKA;AACA;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;;;AAGA;AACA,I","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","// const Maze = require(\"./maze\");\n\n// [ TOP, RIGHT, BOTTOM, LEFT ]\n\nconst drawMaze = (maze, ctx, n, w, h) => {\n  console.log(\"????\")\n  console.log(n)\n  // let mazev/ = new Maze(n);\n  // let canvas = document.getElementById('maze');\n  // let ctx = canvas.getContext('2d');\n  let cells = maze.cells;\n  ctx.canvas.width = w;\n  ctx.canvas.height = h;\n\n  let inc = w / n; // width of canvas div. by num of cells per row\n\n  for (let i = 0; i < n; i++) {\n    let row = cells[i];\n    console.log(cells)\n    console.log(row)\n    for (let j = 0; j < n; j++) {\n      let cell = row[j];\n\n      let y = i * inc;\n      let x = j * inc;\n\n      if (cell[0] === 0) {\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + inc, y);\n        ctx.stroke();\n      }\n\n      if (cell[1] === 0) {\n        ctx.moveTo(x + inc, y);\n        ctx.lineTo(x + inc, y + inc);\n        ctx.stroke();\n      }\n\n      if (cell[2] === 0) {\n        ctx.moveTo(x, y + inc);\n        ctx.lineTo(x + inc, y + inc);\n        ctx.stroke();\n      }\n\n      if (cell[3] === 0) {\n        ctx.moveTo(x, y);\n        ctx.lineTo(x, y + inc);\n        ctx.stroke();\n      }\n      \n    }\n  }\n}\n\n// drawMaze(10, 500, 500);\n\n\nmodule.exports = drawMaze;","const Maze = require(\"./maze\");\nconst drawMaze = require(\"./draw_maze\");\n\n// window.Maze = Maze;\n// window.drawMaze = drawMaze;\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let n = 20;\n  let w = 500;\n  let h = 500;\n  const canvasEl = document.getElementById(\"maze\");\n\n  const ctx = canvasEl.getContext('2d');\n  const maze = new Maze(n);\n  console.log(maze)\n  drawMaze(maze, ctx, n, w, h);\n})","\n\nclass Maze {\n  constructor(n) {   \n    this.totalCellCount = n * n;\n    this.cells = [];\n    this.unvisited = [];\n\n\n    this.newMaze(n);\n\n    this.path = []; // path of visited cell coordinates\n    this.countVisited = 0;\n    this.currCell;\n    this.selectStart(n);\n    this.next;\n    this.run(n);\n  }\n\n  newMaze(n) {\n    // console.log(\"end\")\n    // console.log(n)\n    \n    for (let i = 0; i < n; i++) {\n      this.cells[i] = []; // [ [], [], [] ]\n      this.unvisited[i] = []; // [ [], [], [] ]\n      // console.log(\"??\")\n      for (let j = 0; j < n; j++) {\n        this.cells[i][j] = [0, 0, 0, 0];    // [ [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],       [ [ [true], [true], [true] ],\n        this.unvisited[i][j] = true;        //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],         [ [true], [true], [true] ],\n      }                                     //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ]  ]       [ [true], [true], [true] ]  ]\n    }\n  }\n\n  selectStart(n) {\n    let x = Math.floor(Math.random() * n);\n    let y = Math.floor(Math.random() * n);\n    let coords = [y, x]\n    this.path.push(coords);\n    // [ [y, x] ]\n    // console.log(\"start\")\n    // console.log(n);\n    // console.log(x);\n    // console.log(y);\n    // console.log(this)\n\n    console.log(this.unvisited)\n    debugger\n    this.unvisited[y][x] = false;       \n    this.countVisited += 1;\n    this.currCell = coords;\n    \n    // return coords;    \n  }\n\n\n  // [top, right, bottom, left]\n  // [yCoord, xCoord, wallCurrent, wallNeighbor]\n\n  run(n) { // REMEBER TO PASS N\n    while (this.countVisited < this.totalCellCount) {\n      // console.log(this.currCell)\n      let possible = [\n        [this.currCell[0] - 1, this.currCell[1], 0, 2], // top\n        [this.currCell[0], this.currCell[1] + 1, 1, 3], // right\n        [this.currCell[0] + 1, this.currCell[1], 2, 0], // bottom\n        [this.currCell[0], this.currCell[1] - 1, 3, 1] // left \n      ];\n\n      let neighbors = [];\n\n      for (let i = 0; i < 4; i++) {\n        if (possible[i][0] > -1 &&  // making sure its in bounds\n            possible[i][0] < n &&\n            possible[i][1] > -1 &&\n            possible[i][1] < n &&\n            this.unvisited[possible[i][0]][possible[i][1]]) {// if true, hasn't been visited\n          \n          neighbors.push(possible[i]); // if all condition met, valid neighbor\n        } \n      }\n\n      // now check to make sure at least one neighbor, otherwise its a dead end\n      if (neighbors.length > 0) {\n        // if there's a valid neighbor, randomly select one\n        this.pickNext(neighbors);\n        // this.next = neighbors[ Math.floor( Math.random() * neighbors.length ) ];\n      } else {\n        this.currCell = this.path.pop(); // if no valid neighbor, backtrack to last cell\n      }\n    }\n\n    return this.cells;\n  }\n\n\n  pickNext(neighbors) {\n    // randomly select neighbor\n    this.next = neighbors[Math.floor(Math.random() * neighbors.length)];\n    // remove wall of currCell and chosen neighbor, 1 signifies there is no wall\n    this.cells[this.currCell[0]][this.currCell[1]][this.next[2]] = 1 // knock down currCell wall => this.cells[currY][currX][currCellWall]\n    this.cells[this.next[0]][this.next[1]][this.next[3]] = 1 // knock down currCell wall => this.cells[neighY][neighX][neighCellWall]\n    // mark next as visitied, increment counter, and set current to next\n    this.unvisited[this.next[0]][this.next[1]] = false; \n    this.countVisited += 1;\n    this.currCell = [this.next[0], this.next[1]];\n    // add cell to path\n    this.path.push(this.currCell);\n  }\n}\n\nmodule.exports = Maze;\n\n// let maze2 = new Maze(4);\n\n// console.log(maze2);\n\n\n\n\n// generateMaze(n) {\n//   let gridCells = n * n;\n//   let checkedCells = [];\n//   let uncheckedCells = [];\n\n//   for (let i = 0; i < n; i++) {\n//     gridCells.push([]);\n//     uncheckedCells.push([]);\n\n\n//   }\n// } "],"sourceRoot":""}