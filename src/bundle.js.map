{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/coins.js","webpack:///./src/game.js","webpack:///./src/game_view.js","webpack:///./src/index.js","webpack:///./src/interface.js","webpack:///./src/maze.js","webpack:///./src/modal.js","webpack:///./src/moving_object.js","webpack:///./src/score.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;;;;;;AC3CA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,qBAAqB,mBAAO,CAAC,+CAAiB;AAC9C,iBAAiB,mBAAO,CAAC,uCAAa;AACtC,aAAa,mBAAO,CAAC,+BAAS;AAC9B,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iCAAiC,6DAA6D,E;AAC9F;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,mEAAmE;;AAExG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,I;;;;;;;;;;;ACjFA;;AAEA;AACA;AACA;AACA;AACA;AACA,+B;AACA,uB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oB;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,6B;AACA,qD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8C;AACA;;AAEA,2C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;;AAEL;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvIA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B;AACA,qBAAqB,mBAAO,CAAC,+CAAiB;AAC9C,iBAAiB,mBAAO,CAAC,uCAAa;AACtC,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,cAAc,mBAAO,CAAC,+BAAS;AAC/B,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,aAAa,mBAAO,CAAC,+BAAS;AAC9B,cAAc,mBAAO,CAAC,+BAAS;;AAE/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,CAAC,C;;;;;;;;;;;AC3BD,aAAa,mBAAO,CAAC,6BAAQ;;AAE7B;AACA;AACA;AACA;AACA,gE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;;;;;;;AC3BA;AACA,kB;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA,c;AACA,mBAAmB,OAAO;AAC1B,yBAAyB;AACzB,6BAA6B;AAC7B,qBAAqB,OAAO;AAC5B,wCAAwC;AACxC,oCAAoC;AACpC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iC;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,6DAA6D;;AAE7D,sCAAsC;AACtC,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wCAAwC;AACxC;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA,qBAAqB,OAAO;AAC5B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,OAAO;AAC7B,4BAA4B;AAC5B,gCAAgC;AAChC,wBAAwB,OAAO;AAC/B,2CAA2C;AAC3C,uCAAuC;AACvC,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,8DAA8D;;AAE9D,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,2CAA2C;AAC3C;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yB;;;;;;;;;;;AC3PA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;;;;;AChCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","class Coin {\n  constructor(ctx, canvas, n, color) {\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.n = n\n    this.width = 15;\n    this.height = 15;\n    this.color = color;\n\n    this.pos;\n\n    if (color === 'green') {\n      this.pos = [670, 670];\n    } else {\n      this.selectPos(ctx, canvas);\n    }\n\n    let pos = this.pos;\n    if (pos[0] === 10 && pos[1] === 10) {\n      this.selectPos(ctx, canvas);\n    }\n  }\n\n  selectPos(ctx, canvas) {\n    let inc = canvas.width / this.n;\n    let numX = Math.floor(Math.random() * (this.n  - 1));\n    let x = 10 + (inc * numX);\n    let numY = Math.floor(Math.random() * (this.n - 1));\n    let y = 10 + (inc * numY);\n    this.pos = [x, y];\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.rect(this.pos[0], this.pos[1], this.width, this.height);\n    // square.classList.add(\"hero\");\n    // let img = document.getElementById(\"image\");\n    // ctx.drawImage(img, this.pos[0], this.pos[1], 30, 30);\n    ctx.fill();\n  }\n}\n\nmodule.exports = Coin;","const Maze = require(\"./maze\");\nconst MovingObject = require(\"./moving_object\");\nconst GameView = require(\"./game_view\");\nconst Coin = require(\"./coins\");\nconst Score = require(\"./score\");\n\nclass Game {\n  constructor(canvas, ctx, n, w) {\n    this.obj;\n    this.maze;\n    this.view;\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.n = n;\n    this.w = w;\n    \n    this.img = document.createElement(\"img\");\n  }\n\n  newStart() {\n    let canvas = this.canvas;\n    this.obj = new MovingObject({ pos: [10, 10], width: this.w, height: this.w, color: \"red\" });   \n    this.maze = new Maze(this.n);\n    this.maze.drawMaze(this.ctx, this.n, canvas.width, canvas.height);\n    let obj = this.obj;\n\n    let coins = [];\n    for (let i = 0; i < 10; i++) {\n      coins.push(new Coin(this.ctx, canvas, this.n, \"yellow\"))\n    }\n    coins.push(new Coin(this.ctx, canvas, this.n, \"green\"))\n\n    let score = new Score();\n\n    let mazeImage = this.toImage();\n    this.view = new GameView(canvas, this.ctx, obj, mazeImage, coins, score);\n    let view = this.view;\n    view.start();\n  }\n\n  toImage() {\n    let canvas = this.canvas;\n    let data = canvas.toDataURL();\n    this.img.src = data;\n    return this.img;\n  }\n\n}\n  \n\nmodule.exports = Game;\n\n\n// nextLevel() {\n//   this.n += 5;\n//   this.img.src = '#';\n\n//   debugger\n//   const ctx = this.ctx;\n//   const canvas = this.canvas;\n//   const n = this.n;\n//   const width = canvas.width;\n//   const height = canvas.height;\n\n//   ctx.clearRect(0, 0, width, height);\n//   debugger\n//   // this.obj = new MovingObject({ pos: [10, 10], vel: [5, 5], width: 20, height: 20, color: \"#f00\" });\n\n//   this.maze = new Maze(n);\n//   debugger\n//   this.maze.drawMaze(ctx, n, width, height);\n//   debugger\n//   const obj = this.obj;\n//   const mazeImage = this.toImage();\n//   // this.view = new GameView(canvas, ctx, obj, mazeImage);\n//   this.view.obj = obj;\n//   this.view.mazeImage = mazeImage;\n\n//   const view = this.view;\n//   debugger\n//   view.start();\n// }","// const Maze = require(\"./maze\");\n\nclass GameView {\n  constructor(canvas, ctx, obj, mazeImage, coins, score) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.obj = obj;\n    this.mazeImage = mazeImage;  \n    this.coins = coins;  \n    this.score = score;\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    setInterval(this.updateView.bind(this), 20);\n  }\n\n  bindKeyHandlers() {\n    let ctx = this.ctx;\n    let obj = this.obj;\n    let height = this.canvas.height;\n    let width = this.canvas.width;\n    this.validMove = this.validMove.bind(this);\n\n    Object.keys(GameView.MOVES).forEach((k) => {\n      const delta = GameView.MOVES[k];\n      key(k, () => { \n        this.validMove(delta, k, height, width, obj)\n      })\n    })\n  }\n\n  clear() {\n    let ctx = this.ctx;\n    let canvas = this.canvas;   \n    ctx.clearRect(0, 0, canvas.width, canvas.height); \n    this.drawBackground();\n    this.coins.forEach(coin => coin.draw(ctx));\n  }\n\n  updateView() {\n    this.clear();\n    let ctx = this.ctx;\n    this.obj.draw(ctx);\n    this.coins.forEach(coin => coin.draw(ctx));\n  }\n\n  drawBackground() {\n     this.ctx.drawImage(this.mazeImage, 0, 0); \n  }\n\n  validMove(delta, k, height, width, obj) { \n    let x = obj.pos[0];\n    let y = obj.pos[1];\n    let dx = delta[0];\n    let dy = delta[1];\n    let h = obj.height;\n    let w = obj.width;\n\n    if (k === 'down' && (y + dy + h < height)) {\n      this.clear();\n      this.checkCollision(obj, delta)\n    }\n    if (k === 'up' && (y + dy > 0)) {\n      this.clear();\n      this.checkCollision(obj, delta)\n    }\n    if (k === 'left' && x + dx > 0) {\n      this.clear();\n      this.checkCollision(obj, delta)\n    } \n    if (k === 'right' && x + dx + w < width) {\n      this.clear();\n      this.checkCollision(obj, delta)\n    }\n  }\n  \n  checkCollision( obj, delta) {\n    let ctx = this.ctx;\n    let newX = obj.pos[0] + delta[0];\n    let newY = obj.pos[1] + delta[1];\n    let h = obj.height;\n    let w = obj.width;\n\n    let imgData = ctx.getImageData(newX, newY, w, h);\n    let pix = imgData.data;\n\n    for (let i = 0; i < pix.length; i += 4) {\n      if (pix[i] !== 0) {\n        this.removeCoin(newX, newY, w, h);\n        break \n      } else if (pix[i+1] !== 0) {\n        this.score.win();\n      }\n    }\n    \n    let collision = false\n\n    for (let i = 3; i < pix.length; i += 4) {\n      if(pix[i] !== 0 && pix[i-3] === 0  && pix[i-2] === 0) {\n        collision = true;\n        break;\n      }\n    }\n\n    if (!collision) {\n      obj.move(delta);\n    }\n  }\n\n  removeCoin(newX, newY, w, h) {\n    let newCoins = [];\n\n    this.coins.forEach(coin => {\n      if (coin.pos[0] >= newX && coin.pos[0] <= newX + w &&\n          coin.pos[1] >= newY && coin.pos[1] <= newY + h) {\n            this.score.addPoint();\n          } else {\n            newCoins.push(coin);\n          }\n    })\n\n    this.coins = newCoins;\n  }\n}\n\n\nmodule.exports = GameView;\n\n\nGameView.MOVES = {\n  up: [0, -10],\n  left: [-10, 0],\n  down: [0, 10],\n  right: [10, 0]\n}\n\n","const Maze = require(\"./maze\");\n// const drawMaze = require(\"./draw_maze\");\nconst MovingObject = require(\"./moving_object\");\nconst GameView = require(\"./game_view\");\nconst Game = require(\"./game\");\nconst Modal = require(\"./modal\");\nconst Interface = require('./interface');\nconst Coin = require('./coins');\nconst Score = require(\"./score\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n  const overlay = document.querySelector('.modal-overlay');\n  const modal = new Modal(overlay);\n  window.openModal = modal.open.bind(modal);\n  window.openModal();\n\n  const canvas = document.getElementById(\"maze\");\n  const ctx = canvas.getContext('2d');\n\n  // const interface = new Interface(ctx, canvas);\n\n  game = new Game(canvas, ctx, 20, 15);\n  game.newStart();\n\n  // window.nextLevel = interface.nextLevel.bind(interface);\n\n})","const Game = require(\"./game\");\n\nclass Interface {\n  constructor(ctx, canvas) {\n    this.ctx = ctx;\n    this.canvas = canvas;\n    const levelButton = document.querySelector('.level-button'); \n\n    this.n = 10;\n  }\n\n  registerListeners(levelButton) {\n    levelButton.addEventListener('click', this.nextLevel.bind(this));\n  }\n\n  nextLevel() {\n    this.n += 5;\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n\n    this.ctx.clearRect(0, 0, width, height);\n\n    // debugger\n    const game = new Game(this.canvas, this.ctx, this.n);\n    // debugger\n    game.newStart();\n  }\n}\n\nmodule.exports = Interface;","\n\nclass Maze {\n  constructor(n) {   \n    this.totalCellCount = n * n;\n    this.cells = [];\n    this.unvisited = [];\n    this.n = n;\n\n    this.newMaze(n);\n\n    this.path = []; // path of visited cell coordinates\n    this.countVisited = 0;\n    this.currCell;\n    this.selectStart(n);\n    this.next;\n    this.run(n);\n  }\n\n  newMaze(n) {  \n    for (let i = 0; i < n; i++) {\n      this.cells[i] = []; // [ [], [], [] ]\n      this.unvisited[i] = []; // [ [], [], [] ]\n      for (let j = 0; j < n; j++) {\n        this.cells[i][j] = [0, 0, 0, 0];    // [ [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],       [ [ [true], [true], [true] ],\n        this.unvisited[i][j] = true;        //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],         [ [true], [true], [true] ],\n      }                                     //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ]  ]       [ [true], [true], [true] ]  ]\n    }\n  }\n\n  selectStart(n) {\n    let x = Math.floor(Math.random() * n);\n    let y = Math.floor(Math.random() * n);\n    let coords = [y, x]\n    this.path.push(coords);\n    // [ [y, x] ]\n\n    this.unvisited[y][x] = false;       \n    this.countVisited += 1;\n    this.currCell = coords;\n       \n  }\n\n\n  // [top, right, bottom, left]\n  // [yCoord, xCoord, wallCurrent, wallNeighbor]\n\n  run(n) { // REMEBER TO PASS N\n    while (this.countVisited < this.totalCellCount) {\n\n      let possible = [\n        [this.currCell[0] - 1, this.currCell[1], 0, 2], // top\n        [this.currCell[0], this.currCell[1] + 1, 1, 3], // right\n        [this.currCell[0] + 1, this.currCell[1], 2, 0], // bottom\n        [this.currCell[0], this.currCell[1] - 1, 3, 1] // left \n      ];\n\n      let neighbors = [];\n\n      for (let i = 0; i < 4; i++) {\n        if (possible[i][0] > -1 &&  // making sure its in bounds\n            possible[i][0] < n &&\n            possible[i][1] > -1 &&\n            possible[i][1] < n &&\n            this.unvisited[possible[i][0]][possible[i][1]]) {// if true, hasn't been visited\n          \n          neighbors.push(possible[i]); // if all condition met, valid neighbor\n        } \n      }\n\n      // now check to make sure at least one neighbor, otherwise its a dead end\n      if (neighbors.length > 0) {\n        // if there's a valid neighbor, randomly select one\n        this.pickNext(neighbors);\n        // this.next = neighbors[ Math.floor( Math.random() * neighbors.length ) ];\n      } else {\n        this.currCell = this.path.pop(); // if no valid neighbor, backtrack to last cell\n      }\n    }\n\n    return this.cells;\n  }\n\n\n  pickNext(neighbors) {\n    // randomly select neighbor\n    this.next = neighbors[Math.floor(Math.random() * neighbors.length)];\n    // remove wall of currCell and chosen neighbor, 1 signifies there is no wall\n    this.cells[this.currCell[0]][this.currCell[1]][this.next[2]] = 1 // knock down currCell wall => this.cells[currY][currX][currCellWall]\n    this.cells[this.next[0]][this.next[1]][this.next[3]] = 1 // knock down currCell wall => this.cells[neighY][neighX][neighCellWall]\n    // mark next as visitied, increment counter, and set current to next\n    this.unvisited[this.next[0]][this.next[1]] = false; \n    this.countVisited += 1;\n    this.currCell = [this.next[0], this.next[1]];\n    // add cell to path\n    this.path.push(this.currCell);\n  }\n\n  drawMaze(ctx, n, w, h) {\n    const inc = w / n;\n    const cells = this.cells;\n\n    for (let i = 0; i < n; i++) {\n      let row = cells[i];\n\n      for (let j = 0; j < n; j++) {\n        let cell = row[j];\n\n        let y = i * inc;\n        let x = j * inc;\n\n        ctx.lineWidth = 5;\n        ctx.lineCap = \"round\";\n\n        if (cell[0] === 0) {\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + inc, y);\n          ctx.stroke();\n        }\n\n        if (cell[1] === 0) {\n          ctx.moveTo(x + inc, y);\n          ctx.lineTo(x + inc, y + inc);\n          ctx.stroke();\n        }\n\n        if (cell[2] === 0) {\n          ctx.moveTo(x, y + inc);\n          ctx.lineTo(x + inc, y + inc);\n          ctx.stroke();\n        }\n\n        if (cell[3] === 0) {\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, y + inc);\n          ctx.stroke();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Maze;\n\n\n\n\n\n\n\n\n\n\n\n// class Maze {\n//   constructor(n) {\n//     this.totalCellCount = n * n;\n//     this.cells = [];\n//     this.unvisited = [];\n\n\n//     this.newMaze(n);\n\n//     this.path = []; // path of visited cell coordinates\n//     this.countVisited = 0;\n//     this.currCell;\n//     this.selectStart(n);\n//     this.next;\n//     this.run(n);\n//   }\n\n//   newMaze(n) {\n//     for (let i = 0; i < n; i++) {\n//       this.cells[i] = []; // [ [], [], [] ]\n//       this.unvisited[i] = []; // [ [], [], [] ]\n//       for (let j = 0; j < n; j++) {\n//         this.cells[i][j] = [0, 0, 0, 0];    // [ [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],       [ [ [true], [true], [true] ],\n//         this.unvisited[i][j] = true;        //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],         [ [true], [true], [true] ],\n//       }                                     //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ]  ]       [ [true], [true], [true] ]  ]\n//     }\n//   }\n\n//   selectStart(n) {\n//     let x = Math.floor(Math.random() * n);\n//     let y = Math.floor(Math.random() * n);\n//     let coords = [y, x]\n//     this.path.push(coords);\n//     // [ [y, x] ]\n\n//     this.unvisited[y][x] = false;\n//     this.countVisited += 1;\n//     this.currCell = coords;\n\n//   }\n\n\n//   // [top, right, bottom, left]\n//   // [yCoord, xCoord, wallCurrent, wallNeighbor]\n\n//   run(n) { // REMEBER TO PASS N\n//     while (this.countVisited < this.totalCellCount) {\n\n//       let possible = [\n//         [this.currCell[0] - 1, this.currCell[1], 0, 2], // top\n//         [this.currCell[0], this.currCell[1] + 1, 1, 3], // right\n//         [this.currCell[0] + 1, this.currCell[1], 2, 0], // bottom\n//         [this.currCell[0], this.currCell[1] - 1, 3, 1] // left \n//       ];\n\n//       let neighbors = [];\n\n//       for (let i = 0; i < 4; i++) {\n//         if (possible[i][0] > -1 &&  // making sure its in bounds\n//           possible[i][0] < n &&\n//           possible[i][1] > -1 &&\n//           possible[i][1] < n &&\n//           this.unvisited[possible[i][0]][possible[i][1]]) {// if true, hasn't been visited\n\n//           neighbors.push(possible[i]); // if all condition met, valid neighbor\n//         }\n//       }\n\n//       // now check to make sure at least one neighbor, otherwise its a dead end\n//       if (neighbors.length > 0) {\n//         // if there's a valid neighbor, randomly select one\n//         this.pickNext(neighbors);\n//         // this.next = neighbors[ Math.floor( Math.random() * neighbors.length ) ];\n//       } else {\n//         this.currCell = this.path.pop(); // if no valid neighbor, backtrack to last cell\n//       }\n//     }\n\n//     return this.cells;\n//   }\n\n\n//   pickNext(neighbors) {\n//     // randomly select neighbor\n//     this.next = neighbors[Math.floor(Math.random() * neighbors.length)];\n//     // remove wall of currCell and chosen neighbor, 1 signifies there is no wall\n//     this.cells[this.currCell[0]][this.currCell[1]][this.next[2]] = 1 // knock down currCell wall => this.cells[currY][currX][currCellWall]\n//     this.cells[this.next[0]][this.next[1]][this.next[3]] = 1 // knock down currCell wall => this.cells[neighY][neighX][neighCellWall]\n//     // mark next as visitied, increment counter, and set current to next\n//     this.unvisited[this.next[0]][this.next[1]] = false;\n//     this.countVisited += 1;\n//     this.currCell = [this.next[0], this.next[1]];\n//     // add cell to path\n//     this.path.push(this.currCell);\n//   }\n// }\n\n// module.exports = Maze;","class Modal {\n  constructor(overlay) {\n    this.overlay = overlay;\n    const closeButton = overlay.querySelector('.button-close')\n\n    this.registerListeners(closeButton);\n  }\n\n  open() {\n    this.overlay.classList.remove('is-hidden');\n  }\n\n  close() {\n    this.overlay.classList.add('is-hidden');\n  }\n\n  registerListeners(closeButton) {\n    closeButton.addEventListener('click', this.close.bind(this));\n\n    this.overlay.addEventListener('click', e => {\n      if (e.target.id === this.overlay.id) {\n        this.close();\n      }\n    });\n  }\n}\n\nmodule.exports = Modal;\n\n","\n\nclass MovingObject {\n  constructor(object) {\n    this.pos = object.pos;\n    this.height = object.height;\n    this.width = object.width;\n    this.color = object.color;\n    this.type = object.type;\n\n    this.move = this.move.bind(this);\n  }\n  // U+1F47B\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.rect(this.pos[0], this.pos[1], this.width, this.height);\n    // square.classList.add(\"hero\");\n    // let img = document.getElementById(\"image\");\n    // ctx.drawImage(img, this.pos[0], this.pos[1], 30, 30);\n    ctx.fill();\n    \n  }\n\n  move(delta, k, height, width) {\n    // let square = ctx.rect(this.pos[0], this.pos[1], this.width, this.height);\n    // square.classList.remove(\"hero\");\n    this.pos = [this.pos[0] + delta[0], this.pos[1] + delta[1]]\n  }\n}\n\nmodule.exports = MovingObject;","class Score {\n  constructor() {\n    this.score = 0;\n\n  }\n\n  addPoint() {\n    this.score += 1;\n    this.updateCoins();\n  }\n\n  updateCoins() {\n    let el = document.getElementById(\"coins\");\n    let score = this.score;\n    el.innerHTML = score;\n  }\n\n  win() {\n    let header = document.getElementById(\"modal-header\");\n    header.innerHTML = \"YOU WIN!\";\n\n    let newGame = document.getElementById(\"new-game\");\n    newGame.classList.remove(\"is-hidden\");\n\n    let hide = document.getElementById(\"start\");\n    hide.classList.add(\"is-hidden\");\n\n    let modal = document.getElementById(\"modal\")\n    modal.classList.remove(\"is-hidden\");\n  }\n}\n\nmodule.exports = Score;"],"sourceRoot":""}