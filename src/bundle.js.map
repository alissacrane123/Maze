{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/game.js","webpack:///./src/game_view.js","webpack:///./src/index.js","webpack:///./src/maze.js","webpack:///./src/moving_object.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,qBAAqB,mBAAO,CAAC,+CAAiB;AAC9C,iBAAiB,mBAAO,CAAC,uCAAa;;AAEtC;AACA;AACA,iCAAiC,qEAAqE;AACtG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,I;;;;;;;;;;;AC/DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,kBAAkB;AACtC,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,kBAAkB;AACzC,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3FA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B;AACA,qBAAqB,mBAAO,CAAC,+CAAiB;AAC9C,iBAAiB,mBAAO,CAAC,uCAAa;AACtC,aAAa,mBAAO,CAAC,6BAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,qEAAqE;AAClG;AACA;AACA;AACA;AACA,CAAC,C;;;;;;;;;;;;;ACnBD;AACA,kB;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA,c;AACA,mBAAmB,OAAO;AAC1B,yBAAyB;AACzB,6BAA6B;AAC7B,qBAAqB,OAAO;AAC5B,wCAAwC;AACxC,oCAAoC;AACpC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iC;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,6DAA6D;;AAE7D,sCAAsC;AACtC,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wCAAwC;AACxC;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA,qBAAqB,OAAO;AAC5B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,OAAO;AAC7B,4BAA4B;AAC5B,gCAAgC;AAChC,wBAAwB,OAAO;AAC/B,2CAA2C;AAC3C,uCAAuC;AACvC,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,8DAA8D;;AAE9D,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,2CAA2C;AAC3C;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yB;;;;;;;;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,8B","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","const Maze = require(\"./maze\");\nconst MovingObject = require(\"./moving_object\");\nconst GameView = require(\"./game_view\");\n\nclass Game {\n  constructor(n, canvas, ctx) {\n    this.obj = new MovingObject({ pos: [50, 50], vel: [10, 10], width: 40, height: 40, color: \"#f00\" });\n    const obj = this.obj;\n    this.view = new GameView(canvas, ctx, obj, n);\n    this.maze = new Maze(n)\n  }\n\n  start() {\n    const obj = this.obj;\n    const view = this.view;\n    view.start();\n  }\n\n}\n  \n\n\nmodule.exports = Game;\n\n\n// GameView.MOVES = {\n//   up: [0, -10],\n//   left: [-10, 0],\n//   down: [0, 10],\n//   right: [10, 0]\n// }\n\n\n\n\n\n\n// class Game {\n//   constructor(player) {\n//     this.player = player;\n//   }\n\n//   updateView() {\n//     this.view.clear();\n//     this.obj.pos[0] += 1;\n//     this.obj.update();\n//   }\n\n//   draw(ctx, canvas) {\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//     ctx.fillStyle = \"blue\";\n//     ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n//     this.player.draw(ctx);\n//   }\n\n//   moveObjects(delta) {\n//     this.player.move(delta);\n//   }\n\n//   step(delta) {\n//     this.moveObjects(delta);\n//   }\n// }","// const Maze = require(\"./maze\");\n\nclass GameView {\n  constructor(canvas, ctx, obj) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.obj = obj;\n    // this.maze = new Maze(n);\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    setInterval(this.updateView.bind(this), 20);\n  }\n\n  bindKeyHandlers() {\n    const obj = this.obj;\n\n    Object.keys(GameView.MOVES).forEach((k) => {\n      const delta = GameView.MOVES[k];\n      key(k, () => { obj.move(delta) })\n    })\n  }\n\n  clear() {\n    const ctx = this.ctx;\n    const canvas = this.canvas;\n    const width = canvas.width;\n    const height = canvas.height;\n\n    ctx.clearRect(0, 0, width, height);\n    // const maze = this.maze;\n    // const n = maze.n;\n    // maze.drawMaze(ctx, n, width, height);\n  }\n\n  updateView() {\n    this.clear();\n    // this.obj.pos[0] += 1;\n    // const maze = this.maze;\n    const ctx = this.ctx;\n    this.obj.draw(ctx);\n  }\n}\n\n\nmodule.exports = GameView;\n\n\nGameView.MOVES = {\n  up: [0, -10],\n  left: [-10, 0],\n  down: [0, 10],\n  right: [10, 0]\n}\n\n\n\n\n// class GameView {\n//   constructor(canvas, ctx) {\n//     this.canvas = canvas;\n//     this.ctx = ctx;\n//   }\n\n//   bindKeyHandlers(obj) {\n\n//     Object.keys(GameView.MOVES).forEach((k) => {\n//       const delta = GameView.MOVES[k];\n//       key(k, () => { obj.move(delta) })\n//     })\n//   }\n\n//   clear() {\n//     const ctx = this.ctx;\n//     const canvas = this.canvas;\n//     const width = canvas.width;\n//     const height = canvas.height;\n\n//     ctx.clearRect(0, 0, width, height);\n//   }\n\n//   updateView(obj) {\n//     // const view = this.view;\n//     // view.clear();\n//     this.clear();\n\n//     // const obj = this.obj;\n//     const ctx = this.ctx;\n//     obj.draw(ctx);\n//   }\n// }\n","const Maze = require(\"./maze\");\n// const drawMaze = require(\"./draw_maze\");\nconst MovingObject = require(\"./moving_object\");\nconst GameView = require(\"./game_view\");\nconst Game = require(\"./game\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let n = 15;\n  let w = 750;\n  let h = 750;\n  const canvas = document.getElementById(\"maze\");\n  const ctx = canvas.getContext('2d');\n  // const maze = new Maze(n);\n  // maze.drawMaze(ctx, n, w, h);\n  // drawMaze(maze, ctx, n, w, h);\n\n  // obj = new MovingObject({ pos: [50, 50], vel: [10, 10], width: 40, height: 40, color: \"#f00\" });\n  // view = new GameView(canvas, ctx, obj, n);\n  game = new Game(n, canvas, ctx);\n  // view.start();\n  game.start();\n})","\n\nclass Maze {\n  constructor(n) {   \n    this.totalCellCount = n * n;\n    this.cells = [];\n    this.unvisited = [];\n    this.n = n;\n\n    this.newMaze(n);\n\n    this.path = []; // path of visited cell coordinates\n    this.countVisited = 0;\n    this.currCell;\n    this.selectStart(n);\n    this.next;\n    this.run(n);\n  }\n\n  newMaze(n) {  \n    for (let i = 0; i < n; i++) {\n      this.cells[i] = []; // [ [], [], [] ]\n      this.unvisited[i] = []; // [ [], [], [] ]\n      for (let j = 0; j < n; j++) {\n        this.cells[i][j] = [0, 0, 0, 0];    // [ [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],       [ [ [true], [true], [true] ],\n        this.unvisited[i][j] = true;        //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],         [ [true], [true], [true] ],\n      }                                     //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ]  ]       [ [true], [true], [true] ]  ]\n    }\n  }\n\n  selectStart(n) {\n    let x = Math.floor(Math.random() * n);\n    let y = Math.floor(Math.random() * n);\n    let coords = [y, x]\n    this.path.push(coords);\n    // [ [y, x] ]\n\n    this.unvisited[y][x] = false;       \n    this.countVisited += 1;\n    this.currCell = coords;\n       \n  }\n\n\n  // [top, right, bottom, left]\n  // [yCoord, xCoord, wallCurrent, wallNeighbor]\n\n  run(n) { // REMEBER TO PASS N\n    while (this.countVisited < this.totalCellCount) {\n\n      let possible = [\n        [this.currCell[0] - 1, this.currCell[1], 0, 2], // top\n        [this.currCell[0], this.currCell[1] + 1, 1, 3], // right\n        [this.currCell[0] + 1, this.currCell[1], 2, 0], // bottom\n        [this.currCell[0], this.currCell[1] - 1, 3, 1] // left \n      ];\n\n      let neighbors = [];\n\n      for (let i = 0; i < 4; i++) {\n        if (possible[i][0] > -1 &&  // making sure its in bounds\n            possible[i][0] < n &&\n            possible[i][1] > -1 &&\n            possible[i][1] < n &&\n            this.unvisited[possible[i][0]][possible[i][1]]) {// if true, hasn't been visited\n          \n          neighbors.push(possible[i]); // if all condition met, valid neighbor\n        } \n      }\n\n      // now check to make sure at least one neighbor, otherwise its a dead end\n      if (neighbors.length > 0) {\n        // if there's a valid neighbor, randomly select one\n        this.pickNext(neighbors);\n        // this.next = neighbors[ Math.floor( Math.random() * neighbors.length ) ];\n      } else {\n        this.currCell = this.path.pop(); // if no valid neighbor, backtrack to last cell\n      }\n    }\n\n    return this.cells;\n  }\n\n\n  pickNext(neighbors) {\n    // randomly select neighbor\n    this.next = neighbors[Math.floor(Math.random() * neighbors.length)];\n    // remove wall of currCell and chosen neighbor, 1 signifies there is no wall\n    this.cells[this.currCell[0]][this.currCell[1]][this.next[2]] = 1 // knock down currCell wall => this.cells[currY][currX][currCellWall]\n    this.cells[this.next[0]][this.next[1]][this.next[3]] = 1 // knock down currCell wall => this.cells[neighY][neighX][neighCellWall]\n    // mark next as visitied, increment counter, and set current to next\n    this.unvisited[this.next[0]][this.next[1]] = false; \n    this.countVisited += 1;\n    this.currCell = [this.next[0], this.next[1]];\n    // add cell to path\n    this.path.push(this.currCell);\n  }\n\n  drawMaze(ctx, n, w, h) {\n    const inc = w / n;\n    const cells = this.cells;\n\n    for (let i = 0; i < n; i++) {\n      let row = cells[i];\n\n      for (let j = 0; j < n; j++) {\n        let cell = row[j];\n\n        let y = i * inc;\n        let x = j * inc;\n\n        ctx.lineWidth = 5;\n        ctx.lineCap = \"round\";\n\n        if (cell[0] === 0) {\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + inc, y);\n          ctx.stroke();\n        }\n\n        if (cell[1] === 0) {\n          ctx.moveTo(x + inc, y);\n          ctx.lineTo(x + inc, y + inc);\n          ctx.stroke();\n        }\n\n        if (cell[2] === 0) {\n          ctx.moveTo(x, y + inc);\n          ctx.lineTo(x + inc, y + inc);\n          ctx.stroke();\n        }\n\n        if (cell[3] === 0) {\n          ctx.moveTo(x, y);\n          ctx.lineTo(x, y + inc);\n          ctx.stroke();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Maze;\n\n\n\n\n\n\n\n\n\n\n\n// class Maze {\n//   constructor(n) {\n//     this.totalCellCount = n * n;\n//     this.cells = [];\n//     this.unvisited = [];\n\n\n//     this.newMaze(n);\n\n//     this.path = []; // path of visited cell coordinates\n//     this.countVisited = 0;\n//     this.currCell;\n//     this.selectStart(n);\n//     this.next;\n//     this.run(n);\n//   }\n\n//   newMaze(n) {\n//     for (let i = 0; i < n; i++) {\n//       this.cells[i] = []; // [ [], [], [] ]\n//       this.unvisited[i] = []; // [ [], [], [] ]\n//       for (let j = 0; j < n; j++) {\n//         this.cells[i][j] = [0, 0, 0, 0];    // [ [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],       [ [ [true], [true], [true] ],\n//         this.unvisited[i][j] = true;        //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ],         [ [true], [true], [true] ],\n//       }                                     //   [ [0,0,0,0], [0,0,0,0], [0,0,0,0] ]  ]       [ [true], [true], [true] ]  ]\n//     }\n//   }\n\n//   selectStart(n) {\n//     let x = Math.floor(Math.random() * n);\n//     let y = Math.floor(Math.random() * n);\n//     let coords = [y, x]\n//     this.path.push(coords);\n//     // [ [y, x] ]\n\n//     this.unvisited[y][x] = false;\n//     this.countVisited += 1;\n//     this.currCell = coords;\n\n//   }\n\n\n//   // [top, right, bottom, left]\n//   // [yCoord, xCoord, wallCurrent, wallNeighbor]\n\n//   run(n) { // REMEBER TO PASS N\n//     while (this.countVisited < this.totalCellCount) {\n\n//       let possible = [\n//         [this.currCell[0] - 1, this.currCell[1], 0, 2], // top\n//         [this.currCell[0], this.currCell[1] + 1, 1, 3], // right\n//         [this.currCell[0] + 1, this.currCell[1], 2, 0], // bottom\n//         [this.currCell[0], this.currCell[1] - 1, 3, 1] // left \n//       ];\n\n//       let neighbors = [];\n\n//       for (let i = 0; i < 4; i++) {\n//         if (possible[i][0] > -1 &&  // making sure its in bounds\n//           possible[i][0] < n &&\n//           possible[i][1] > -1 &&\n//           possible[i][1] < n &&\n//           this.unvisited[possible[i][0]][possible[i][1]]) {// if true, hasn't been visited\n\n//           neighbors.push(possible[i]); // if all condition met, valid neighbor\n//         }\n//       }\n\n//       // now check to make sure at least one neighbor, otherwise its a dead end\n//       if (neighbors.length > 0) {\n//         // if there's a valid neighbor, randomly select one\n//         this.pickNext(neighbors);\n//         // this.next = neighbors[ Math.floor( Math.random() * neighbors.length ) ];\n//       } else {\n//         this.currCell = this.path.pop(); // if no valid neighbor, backtrack to last cell\n//       }\n//     }\n\n//     return this.cells;\n//   }\n\n\n//   pickNext(neighbors) {\n//     // randomly select neighbor\n//     this.next = neighbors[Math.floor(Math.random() * neighbors.length)];\n//     // remove wall of currCell and chosen neighbor, 1 signifies there is no wall\n//     this.cells[this.currCell[0]][this.currCell[1]][this.next[2]] = 1 // knock down currCell wall => this.cells[currY][currX][currCellWall]\n//     this.cells[this.next[0]][this.next[1]][this.next[3]] = 1 // knock down currCell wall => this.cells[neighY][neighX][neighCellWall]\n//     // mark next as visitied, increment counter, and set current to next\n//     this.unvisited[this.next[0]][this.next[1]] = false;\n//     this.countVisited += 1;\n//     this.currCell = [this.next[0], this.next[1]];\n//     // add cell to path\n//     this.path.push(this.currCell);\n//   }\n// }\n\n// module.exports = Maze;","\n\nclass MovingObject {\n  constructor(object) {\n    this.pos = object.pos;\n    this.vel = object.vel;\n    this.height = object.height;\n    this.width = object.width;\n    this.color = object.color;\n\n\n    // this.ctx.fillStyle = this.color;\n    // this.ctx.fillRect = (this.pos[0], this.pos[1], this.width, this.height)\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    // ctx.beginPath();\n    ctx.fillRect(this.pos[0], this.pos[1], this.width, this.height)\n    // ctx.fill();\n  }\n\n  move(delta) {\n    this.pos = [this.pos[0] + delta[0], this.pos[1] + delta[1]]\n  }\n\n}\n\nmodule.exports = MovingObject;"],"sourceRoot":""}